// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/msg_handler_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	model "gitlab.ozon.dev/alex.bogushev/telegram-bot/internal/model"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockMessageSender) SendMessage(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageSenderMockRecorder) SendMessage(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageSender)(nil).SendMessage), text, userID)
}

// MockSpendingService is a mock of SpendingService interface.
type MockSpendingService struct {
	ctrl     *gomock.Controller
	recorder *MockSpendingServiceMockRecorder
}

// MockSpendingServiceMockRecorder is the mock recorder for MockSpendingService.
type MockSpendingServiceMockRecorder struct {
	mock *MockSpendingService
}

// NewMockSpendingService creates a new mock instance.
func NewMockSpendingService(ctrl *gomock.Controller) *MockSpendingService {
	mock := &MockSpendingService{ctrl: ctrl}
	mock.recorder = &MockSpendingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpendingService) EXPECT() *MockSpendingServiceMockRecorder {
	return m.recorder
}

// GetStatsBy mocks base method.
func (m *MockSpendingService) GetStatsBy(arg0 model.ReportType) (time.Time, time.Time, map[model.Category]decimal.Decimal, model.CurrencyType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsBy", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(map[model.Category]decimal.Decimal)
	ret3, _ := ret[3].(model.CurrencyType)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetStatsBy indicates an expected call of GetStatsBy.
func (mr *MockSpendingServiceMockRecorder) GetStatsBy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsBy", reflect.TypeOf((*MockSpendingService)(nil).GetStatsBy), arg0)
}

// Save mocks base method.
func (m *MockSpendingService) Save(arg0 *model.Spending) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSpendingServiceMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSpendingService)(nil).Save), arg0)
}

// UpdateCurrentType mocks base method.
func (m *MockSpendingService) UpdateCurrentType(arg0 model.CurrencyType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCurrentType", arg0)
}

// UpdateCurrentType indicates an expected call of UpdateCurrentType.
func (mr *MockSpendingServiceMockRecorder) UpdateCurrentType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrentType", reflect.TypeOf((*MockSpendingService)(nil).UpdateCurrentType), arg0)
}
