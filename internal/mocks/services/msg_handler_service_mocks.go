// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/msg_handler_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	model "gitlab.ozon.dev/alex.bogushev/telegram-bot/internal/model"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockMessageSender) SendMessage(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageSenderMockRecorder) SendMessage(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageSender)(nil).SendMessage), text, userID)
}

// MockSpendingService is a mock of SpendingService interface.
type MockSpendingService struct {
	ctrl     *gomock.Controller
	recorder *MockSpendingServiceMockRecorder
}

// MockSpendingServiceMockRecorder is the mock recorder for MockSpendingService.
type MockSpendingServiceMockRecorder struct {
	mock *MockSpendingService
}

// NewMockSpendingService creates a new mock instance.
func NewMockSpendingService(ctrl *gomock.Controller) *MockSpendingService {
	mock := &MockSpendingService{ctrl: ctrl}
	mock.recorder = &MockSpendingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpendingService) EXPECT() *MockSpendingServiceMockRecorder {
	return m.recorder
}

// GetStatsBy mocks base method.
func (m *MockSpendingService) GetStatsBy(arg0, arg1 time.Time) (map[string]decimal.Decimal, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsBy", arg0, arg1)
	ret0, _ := ret[0].(map[string]decimal.Decimal)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStatsBy indicates an expected call of GetStatsBy.
func (mr *MockSpendingServiceMockRecorder) GetStatsBy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsBy", reflect.TypeOf((*MockSpendingService)(nil).GetStatsBy), arg0, arg1)
}

// Save mocks base method.
func (m *MockSpendingService) Save(arg0 model.Spending) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSpendingServiceMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSpendingService)(nil).Save), arg0)
}

// MockCurrencyService is a mock of CurrencyService interface.
type MockCurrencyService struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyServiceMockRecorder
}

// MockCurrencyServiceMockRecorder is the mock recorder for MockCurrencyService.
type MockCurrencyServiceMockRecorder struct {
	mock *MockCurrencyService
}

// NewMockCurrencyService creates a new mock instance.
func NewMockCurrencyService(ctrl *gomock.Controller) *MockCurrencyService {
	mock := &MockCurrencyService{ctrl: ctrl}
	mock.recorder = &MockCurrencyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyService) EXPECT() *MockCurrencyServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockCurrencyService) GetAll() []model.Currency {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Currency)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCurrencyServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCurrencyService)(nil).GetAll))
}

// UpdateCurrentCurrency mocks base method.
func (m *MockCurrencyService) UpdateCurrentCurrency(c string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrentCurrency", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCurrentCurrency indicates an expected call of UpdateCurrentCurrency.
func (mr *MockCurrencyServiceMockRecorder) UpdateCurrentCurrency(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrentCurrency", reflect.TypeOf((*MockCurrencyService)(nil).UpdateCurrentCurrency), c)
}

// MockCategoryService is a mock of CategoryService interface.
type MockCategoryService struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryServiceMockRecorder
}

// MockCategoryServiceMockRecorder is the mock recorder for MockCategoryService.
type MockCategoryServiceMockRecorder struct {
	mock *MockCategoryService
}

// NewMockCategoryService creates a new mock instance.
func NewMockCategoryService(ctrl *gomock.Controller) *MockCategoryService {
	mock := &MockCategoryService{ctrl: ctrl}
	mock.recorder = &MockCategoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryService) EXPECT() *MockCategoryServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockCategoryService) GetAll() []model.Category {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Category)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCategoryServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCategoryService)(nil).GetAll))
}
